# Info
Dependency injection is handled by both containers. The main difference is the fact that CDI handles DI in a dynamic (aka: stateful) way - this means that dependencies are resolved at execution time. Spring's approach is static - this means that components are wired together at creation time. While the CDI-way might seem a bit unusual at a first glimpse, it's far superior and offers way more and advanced options (I'm writing this with the background of two productive CDI apps).

f you need more functionality, CDI comes with the concept of portable extensions (which by itself makes the API worthwile). Independent extension modules like Apache CODI and Seam 3 exist and cover topics like security, mailing, reporting and more.

To summarize: CDI is nothing like a "replacement" for the Spring ecosystem, it's rather an improvement over Spring's dependency injection mechanism. It's part of Java EE 6, so if you are on a GlasFish with Java EE 6, you should definitely go for CDI.

JSR 299: Contexts and Dependency Injection (CDI) defines a set of services for the Java EE environment that makes applications much easier to develop. It provides an architecture that allows Java EE components such as servlets, enterprise beans, and JavaBeans to exist within the lifecycle of an application with well-defined scopes. In addition, CDI services allow Java EE components, including EJB session beans and JavaServer Faces (JSF) managed beans to be injected and to interact in a loosely coupled way by firing and observing events. Perhaps most significantly, CDI unifies and simplifies the EJB and JSF programming models. It allows enterprise beans to act as managed beans in a JSF application. Through its services, CDI brings transactional support to the web tier. This can make it a lot easier to access transactional resources in web applications. For example, CDI services makes it a lot easier to build a Java EE web application that accesses a database with persistence provided by the Java Persistence API.

JSR 330: Dependency Injection For Java introduces a standard set of annotations that can be used for dependency injection. Dependency injection is a popular technique in developing enterprise Java applications. Unfortunately, there has not been a standard approach for annotation-based dependency injection. Dependency Injection For Java changes that by providing a standardized and extensible API for dependency injection. The API comprises a set of annotations for use on injectable classes.

JSR 314: JavaServer Faces technology provides a server-side component framework that is designed to simplify the development of user interfaces (UIs) for Java EE applications. The latest release of the technology, JSR 314 JavaServer Faces 2.0, makes UI development for Java EE applications even easier through support for annotations and the addition of new features such as Facelets and composite components.

CDI is preferred because it allows apps of large (arbitrary?) horizontal and vertical scales to share contexts, dependencies, and therefore data.

Here are a few advantages:
Looser coupling
Easier testing
Better layering
Interface-based design
Dynamic proxies (segue to AOP).

# Tips
- Habilitar o CDI no projeto é muito simples. Se você já está usando um servidor Java EE 6, basta criar um arquivo vazio chamado beans.xml na pasta META-INF do seu projeto (ou WEB-INF num projeto web). Esse é um simples arquivo de marcação e apenas sua presença já faz com que o servidor habilite o suporte a CDI e escaneie suas classes automaticamente.
- Se você estiver usando Tomcat, Jetty ou outro servidor antes do Java EE 6, ainda é possível habilitar o CDI copiando e configurando o JAR de alguma de suas implementações. Vamos usar o Weld, a implementação de referência e a mais usada (já embutida no JBoss e no Glassfish).
- In JSF, a class that can be accessed from a JSF page is called Managed Bean. By annotating the HelloWorld class with the @ManagedBean annotation it becomes a Managed Bean which is accessible and controlled by the JSF framework.
- A Java bean or JSF managed bean, with a name property to store user data. In JSF, managed bean means this Java class or bean can be accessed from a JSF page.
- @Named annotation is commonly used if there are more than one implementation for an interface. Thus, it provides to give and inject by their names.
- If there is only one implementation of an interface, compiler will inject it as the default one. So, there is no need to use @Named, @Default or @Alternative annotations.
- Você notará que também adicionamos a anotação @Named nesta classe. Esta anotação somente é necessária quando você quer tornar o Bean acessível em uma página JSF por meio de EL (ou seja, #{game})
- E como o fato do CDI trabalhar fortemente com typesafe, não teremos surpresas em tempo de execução, pois o CDI valida se a injeção que irá acontecer é válida tudo isso é realizado durante a inicialização do sistema.
- @Inject instead of Spring’s @Autowired to inject a bean.
- @Named instead of Spring’s @Component to declare a component/bean (an implementation public class, not the interface)
- Use o @ManagedBean mesmo. É o padrão para o JSF 2. O @Named é pra outras coisas como CDI.
- A anotação @Named faz parte do CDI e para ativa-la é necessário criar o arquivo beans.xml em WEB-INF e tem um detalhe..... a classe deve implementar Serializable e os imports são dos pacotes javax.enterprise e inject.
- Always prefer javax.enterprise.context.SessionScoped over javax.faces.bean.SessionScoped
- CDI is preferred over plain JSF because CDI allows for JavaEE-wide dependency injection. You can also inject POJOs and let them be managed. With JSF you can only inject a subset of what you can with CDI.
- As per JSF 2.3, @ManagedBean will be deprecated. This means there's not anymore a reason to choose @ManagedBean over @Named

# CDI
http://stackoverflow.com/questions/2652126/google-guice-vs-jsr-299-cdi-weld#
http://weld.cdi-spec.org/
http://stackoverflow.com/questions/5973364/is-cdi-a-good-replacement-of-spring
https://en.wikipedia.org/wiki/Dependency_injection
https://matthiaswessendorf.wordpress.com/2010/01/19/dependency-injection-the-jsr-330-way/
http://blog.caelum.com.br/use-cdi-no-seu-proximo-projeto-java/
http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/example.html
http://buraktas.com/java-cdi-dependency-injection-example/

# ANNOTATIONS
http://stackoverflow.com/questions/5415261/what-is-javax-inject-named-annotation-supposed-to-be-used-for # @Named
http://buraktas.com/java-cdi-dependency-injection-example/
http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/example.html
http://stackoverflow.com/questions/4093504/resource-vs-autowired
http://javabeat.net/inject-named-jsr-330annotations-example/
http://javabeat.net/difference-resource-autowired-inject-spring-injection/
http://stackoverflow.com/questions/15057564/why-are-there-different-bean-management-annotations
http://stackoverflow.com/questions/11986847/java-ee-6-javax-annotation-managedbean-vs-javax-inject-named-vs-javax-faces
http://stackoverflow.com/questions/4347374/backing-beans-managedbean-or-cdi-beans-named/4347707#4347707

# MAVEN
https://maven.apache.org/guides/mini/guide-naming-conventions.html

# WELD 2.4.1 -> implements CDI version 1.2
http://imasters.com.br/artigo/20522/java/jboss-weld-e-jsf-20-do-comeco-ao-fim/?trace=1519021197&source=single
https://www.mkyong.com/spring3/spring-3-and-jsr-330-inject-and-named-example/

# WILDFLY
https://docs.jboss.org/wildfly/plugins/maven/latest/examples/deployment-example.html
http://balusc.omnifaces.org/2014/10/jsf-22-tutorial-with-eclipse-and-wildfly.html
http://www.source4code.info/2016/01/jsf-primefaces-hello-world-example-using-wildfly-and-maven.html
http://stackoverflow.com/questions/29118479/maven-wildfly-maven-plugin-custom-standalone-xml/29127121#29127121
https://github.com/Holdo/wildfly-10-web-app/tree/master/ui/src/main/webapp
https://github.com/Holdo/wildfly-10-web-app/blob/master/ui/src/main/webapp/WEB-INF/jboss-web.xml
https://github.com/Holdo/wildfly-10-web-app/blob/master/ui/src/main/webapp/WEB-INF/web.xml
http://stackoverflow.com/questions/28470872/how-to-define-context-path-in-wildfly
http://stackoverflow.com/questions/21957060/jboss-deploying-in-root-context
http://www.source4code.info/2016/01/jsf-primefaces-hello-world-example-using-wildfly-and-maven.html
http://www.source4code.info/2014/04/jsf-primefaces-hello-world-example.html
http://balusc.omnifaces.org/2014/10/jsf-22-tutorial-with-eclipse-and-wildfly.html#AdvancedHelloWorldTheModel

# JSF
https://javaserverfaces.java.net/
https://blogs.oracle.com/enterprisetechtips/entry/using_cdi_and_dependency_injection
http://www.theserverside.com/tutorial/Working-with-CDI-and-JSF-20-on-Tomcat-7-Configuring-Weld

https://www.jetbrains.com/help/idea/2016.2/preparing-for-jsf-application-development.html
https://www.jetbrains.com/help/idea/2016.2/javaserver-faces-jsf.html
http://www.source4code.info/2016/01/jsf-primefaces-hello-world-example-using-wildfly-and-maven.html
http://www.source4code.info/2014/04/jsf-primefaces-hello-world-example.html
http://www.mkyong.com/jsf2/jsf-2-0-hello-world-example/
http://www.devmedia.com.br/criando-e-configurando-um-projeto-web-jsf-2-primefaces-3-e-cdi/25251
http://keylesson.com/index.php/2014/08/26/jsf-2-2-hello-world-282/
http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/example.html
http://www.codeproject.com/Articles/1030872/A-Simple-CRUD-Example-with-JSF # GOOD
http://stackoverflow.com/questions/30107167/how-to-refresh-the-page-after-closing-pdialog
https://www.mkyong.com/jsf2/jsf-2-hidden-value-example/
http://docs.jboss.org/weld/reference/2.4.0.Final/en-US/html/example.html # GOOD

Rich Faces
ICE Faces
Prime Faces -> http://www.primefaces.org/showcase/ui/input/autoComplete.xhtml
			-> http://www.primefaces.org/showcase/ui/misc/fa.xhtml
Open Faces

# HIBERNATE
http://javainfinite.com/jsf/jsf-hibernate-integration-crud-example/
https://github.com/techpages/jsfcrud/blob/master/JSFCRUD/src/com/crud/dao/UserDAOImpl.java
http://jamacedo.com/2010/06/crud-jsf-2-0-hibernate-exemplo-gerenciando-livros-2/

# PRIME FACES COMPONENTS
http://stackoverflow.com/questions/12763373/how-to-use-uiinsert-in-primefaces-ptabmenu
http://www.journaldev.com/5516/primefaces-tutorial-with-example-projects
https://www.mkyong.com/jsf2/primefaces/primefaces-jsf-email-validator-example/
http://stackoverflow.com/questions/7875108/email-validation-using-regular-expression-in-jsf-2-primefaces
http://www.itcuties.com/j2ee/jsf-2-custom-validation-the-email-validation-example/

# MAVEN PROPERTIES
https://cwiki.apache.org/confluence/display/MAVEN/Maven+Properties+Guide
https://www.mkyong.com/maven/how-to-create-user-defined-properties-in-maven/

# INTELLIJ MAVEN ERRO (CANT FIND PLUGINS AND LIBS)
http://stackoverflow.com/questions/20496239/maven-plugins-can-not-be-found-in-intellij
http://stackoverflow.com/questions/24484776/intellij-idea-shows-plugin-not-found
http://stackoverflow.com/questions/16992255/how-can-i-make-intellij-idea-update-my-dependencies-from-maven
http://stackoverflow.com/questions/15727356/intellij-idea-cannot-resolve-anything-in-maven

# JBOSS WEB.XML
https://developer.jboss.org/wiki/HowDoIOverrideTheWebContextRoot
http://stackoverflow.com/questions/5196877/web-xml-validation-error
https://antoniogoncalves.org/2013/06/04/java-ee-7-deployment-descriptors/
http://www.mkyong.com/web-development/the-web-xml-deployment-descriptor-examples/
https://gist.github.com/MarcosJava/522f7ea70009d6efe155

# TOMCAT 8
https://musingsinjava.wordpress.com/2014/11/02/enabling-jsf-2-2-and-cdi-1-2-on-tomcat-8/
http://javaonlineguide.net/2015/06/jsf-2-2-hello-world-tutorial-with-example-basic-concepts.html

# IMAGES
http://3.bp.blogspot.com/-aHP5JfGqarU/U_D59w_PeFI/AAAAAAAACAw/0UP9FVOyQ5E/s1600/54.-HelloWorld.png

# TOOLS
wildfly-10.1.0.Final-weld-2.4.1.Final-patch.zip
wildfly-10.1.0.Final.zip
http://color-themes.com/?view=theme&id=566065a4ddacef1b003edb63 (ladies night 2)

# COMMANDS
$mvn -U idea:idea

# POM.xml HEADER
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">


# STEPS
1. create project (webapp archetype)
2. download and install wildfly-10.1.0.Final
3. apply weld/CDI wildfly patch wildfly-10.1.0.Final-weld-2.4.1.Final-patch.zip using wildfly CLI
4. configure project POM with:
   4.1.     <groupId>org.glassfish</groupId>
            <artifactId>javax.faces</artifactId>
            <version>2.2.9</version>
   4.2.     <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
   4.3.     <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>1.1.0.Alpha11</version>
            </plugin>
5. index.xhtml simple login from
	<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	<html xmlns="http://www.w3.org/1999/xhtml"
	      xmlns:h="http://xmlns.jcp.org/jsf/html"
	      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	      xmlns:f="http://xmlns.jcp.org/jsf/core"
	      xmlns:p="http://primefaces.org/ui">
6. Test: http://localhost:8080/surittec/ 
7.  <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.weld.se</groupId>
      <artifactId>weld-se-core</artifactId>
      <version>2.2.14.Final</version>
    </dependency>

    <dependency>
      <groupId>org.jboss.weld.servlet</groupId>
      <artifactId>weld-servlet</artifactId>
      <version>2.2.14.Final</version>
    </dependency>

    <dependency>
      <groupId>org.glassfish.jersey.ext.cdi</groupId>
      <artifactId>jersey-weld2-se</artifactId>
    </dependency>
8. <h:commandButton value="update" action="#{userService.preUpdate(user)}">
     <f:ajax update="@all" render="@all"/>
   </h:commandButton>
9. beans.xml
   <?xml version="1.0" encoding="UTF-8"?>
   <beans xmlns="http://java.sun.com/xml/ns/javaee"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   </beans>



